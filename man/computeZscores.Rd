% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ZscoreMatrix.R
\docType{methods}
\name{computeZscores}
\alias{computeZscores}
\alias{ZscoreMatrix}
\alias{computeZscores,Outrider2DataSet-method}
\alias{computeEffectSizes}
\title{Z score computation}
\usage{
computeZscores(ods, ...)

ZscoreMatrix(
  ods,
  distribution = c("nb", "gaussian"),
  peerResiduals = FALSE,
  ...
)

\S4method{computeZscores}{Outrider2DataSet}(
  ods,
  distribution = c("nb", "gaussian"),
  peerResiduals = FALSE,
  ...
)

computeEffectSizes(
  ods,
  distribution = c("nb", "gaussian"),
  effect_types = c("fold_change", "zscores", "delta"),
  peerResiduals = FALSE
)
}
\arguments{
\item{ods}{OutriderDataSet}

\item{...}{Currently not used.}

\item{distribution}{The distribution of the data. Used to determine in 
which way to compute zscores. Either 'nb' or 'gaussian'.}

\item{peerResiduals}{If TRUE, PEER residuals are used to compute Z scores}

\item{effect_types}{The types of effects to compute. Possible options are
"fold_change" for log2 fold-changes, "zscores" for z scores, and 
"delta" for the difference between observed and expected values.}
}
\value{
An OutriderDataSet containing the Z score matrix "zScore" as an 
    asasy.

An OutriderDataSet containing the requested effects as assays.
    Z score matrix in "zScore", the log2 fold changes in "l2fc", and/or 
    delta values in "delta".
}
\description{
Computes the z scores for every count in the matrix. 
The z score is defined in the log2 space as follows:
\ifelse{html}{
    \out{z<sub>ij</sub> = (l<sub>ij</sub> - mu<sub>j</sub><sup>l</sup>)/
            sigma<sub>j</sub><sup>l</sup>}}{
    \deqn{z_{ij} = \frac{l_{ij} - \mu_j^l}{\sigma_j^l}}},
where l is the log2 transformed normalized count and mu and sigma the 
mean and standard deviation for gene j, respectively.
}
\examples{
ods <- makeExampleOutriderDataSet()
ods <- estimateSizeFactors(ods)

ods <- controlForConfounders(ods, implementation="pca")
ods <- computeEffectSizes(ods, effect_types=c("fold_change", "zscores"))

zScore(ods)[1:10,1:10]
assay(ods, "l2fc")[1:10,1:10]

}
