% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OUTRIDER.R
\name{OUTRIDER}
\alias{OUTRIDER}
\title{OUTRIDER - Finding expression outlier events}
\usage{
OUTRIDER(
  ods,
  q,
  controlData = TRUE,
  latent_space_model = c("autoencoder", "pca"),
  decoder_model = c("autoencoder", "pca"),
  covariates = NULL,
  usePython = checkUsePython(ods, covariates),
  prepro_options = getDefaultPreproParams(ods),
  pvalue_options = getDefaultPvalueParams(ods),
  useBasilisk = FALSE,
  implementation = "autoencoder",
  BPPARAM = bpparam(),
  ...
)
}
\arguments{
\item{ods}{An OutriderDataSet object}

\item{q}{The encoding dimensions}

\item{controlData}{If TRUE, the default, the raw counts are controled 
for confounders by the autoencoder}

\item{latent_space_model}{Specifies which latent space fitting model to use.
"autoencoder", the default, will use the autoencoder
implementation. Also 'pca' can be used to control
for confounding effects}

\item{decoder_model}{Specifies which decoder fitting model to use.
"autoencoder", the default, will use the autoencoder
implementation. Also 'pca' can be used to control
for confounding effects.}

\item{covariates}{Character vector indicating the known covariates that 
should be considered explicitly in the fit. Defaults to NULL, 
meaning no known covariates are used. Covariates given here must 
be columns in \code{colData(ods)}. Only considered if 
\code{usePython=TRUE}.}

\item{usePython}{Indicates whether the python or the R implementation of the
given confounding method should be used.}

\item{prepro_options}{A list specifying the preprocessing options that 
should be used. If the user wants to change some options, please 
obtain the default list using \code{getDefaultPreproParams(ods)} 
and adapt.}

\item{useBasilisk}{Specifies whether a conda environment installed with 
basilik should be used to run the python code. If FALSE, 
it is assumed that py_outrider is installed and the correct python 
binary is specified using either 
reticulate::use_python(..., force=TRUE) or 
reticulate::use_condaenv(..., force=TRUE), so that py_outrider can 
be loaded with reticulate::import("py_outrider").}

\item{implementation}{Deprecated. Use latent_space_model and decoder_model 
instead.}

\item{BPPARAM}{A 
\code{\link[BiocParallel:BiocParallelParam-class]{BiocParallelParam}}
        instance to be used for parallel computing.}

\item{...}{Further arguments passed on to \code{controlForConfounders}}
}
\value{
OutriderDataSet with all the computed values. The values are stored
            as assays and can be accessed by: \code{assay(ods, 'value')}.
            To get a full list of calculated values run:
            \code{assayNames(ods)}
}
\description{
The OUTRIDER function runs the default OUTRIDER pipeline 
combinig the fit, the computation of Z scores and P-values.
All computed values are returned as an OutriderDataSet object.

To have more control over each analysis step, one can call each 
function separately.

\enumerate{
    \item \code{\link{estimateSizeFactors}} to calculate the sizeFactors
    \item \code{\link{controlForConfounders}} to control for 
              confounding effects
    \item \code{\link{fit}} to fit the negative binomial model 
              (only needed if the autoencoder is not used)
    \item \code{\link{computePvalues}} to calculate the nominal and 
              adjusted P-values
    \item \code{\link{computeZscores}} to calculate the Z scores
}
}
\examples{
ods <- makeExampleOutriderDataSet()
implementation <- 'autoencoder'
\dontshow{
    ods <- ods[1:10,1:10]
    implementation <- 'pca'
}
ods <- OUTRIDER(ods, implementation=implementation)

pValue(ods)[1:10,1:10]
res <- results(ods, all=TRUE)
res

plotAberrantPerSample(ods)
plotVolcano(ods, 1)

}
